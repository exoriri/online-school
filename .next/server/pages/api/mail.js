"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/mail";
exports.ids = ["pages/api/mail"];
exports.modules = {

/***/ "nodemailer":
/*!*****************************!*\
  !*** external "nodemailer" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("nodemailer");

/***/ }),

/***/ "./src/pages/api/mail.ts":
/*!*******************************!*\
  !*** ./src/pages/api/mail.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var nodemailer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nodemailer */ \"nodemailer\");\n/* harmony import */ var nodemailer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nodemailer__WEBPACK_IMPORTED_MODULE_0__);\n\n\nasync function main(name, number, description) {\n  let transporter = nodemailer__WEBPACK_IMPORTED_MODULE_0___default().createTransport({\n    host: \"smtp.gmail.com\",\n    requireTLS: false,\n    secure: true,\n    port: 465,\n    service: \"Gmail\",\n    auth: {\n      user: \"romchikacc@gmail.com\",\n      pass: \"R2#uotochuvak19977\"\n    },\n    tls: {\n      // do not fail on invalid certs\n      rejectUnauthorized: false\n    }\n  });\n  await new Promise((resolve, reject) => {\n    // verify connection configuration\n    transporter.verify(function (error, success) {\n      if (error) {\n        console.log(error);\n        reject(error);\n      } else {\n        console.log(\"Server is ready to take our messages\");\n        resolve(success);\n      }\n    });\n  });\n  await new Promise((resolve, reject) => {\n    // send mail\n    transporter.sendMail({\n      from: '\"Essential skills \" <foo@example.com>',\n      to: \"essentialskills2@gmail.com\",\n      subject: \"–ù–æ–≤–∞—è –∑–∞–≤–∫–∞ üëª\",\n      text: \"–ù–æ–≤–∞—è –∑–∞–≤–∫–∞ üëª\",\n      html: `<p><b>–ò–º—è: ${name}</b></p>\n           <p><b>–ù–æ–º–µ—Ä –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç: ${number}</b></p>\n           <p><b>–û–ø–∏—Å–∞–Ω–∏–µ: ${description}</b></p>\n    `\n    }, (err, info) => {\n      if (err) {\n        console.error(err);\n        reject(err);\n      } else {\n        console.log(info);\n        resolve(info);\n      }\n    });\n  });\n}\n\nasync function handler(req, res) {\n  if (req.method === \"POST\") {\n    const {\n      name,\n      number,\n      description,\n      c_token\n    } = req.body;\n    res.setHeader(\"Content-Type\", \"application/json\");\n    res.statusCode = 200;\n\n    try {\n      let captchaResponse = await fetch(`https://www.google.com/recaptcha/api/siteverify?secret=6Ldp-yseAAAAAG3JYpazb4cdJ_YT-Aqy2aJTRc8n&response=${c_token}`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n      });\n      captchaResponse = await captchaResponse.json();\n\n      if (!captchaResponse.success) {\n        res.end(JSON.stringify({\n          success: false,\n          message: \"–ë–æ—Ç–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã!\"\n        }));\n      }\n\n      if (name !== \"\" && number !== \"\" && description !== \"\") {\n        await main(name, number, description);\n        res.end(JSON.stringify({\n          success: true,\n          message: \"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è\"\n        }));\n      } else {\n        res.end(JSON.stringify({\n          success: false,\n          message: \"–ü–æ–ª—è –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–µ\"\n        }));\n      }\n    } catch (e) {\n      res.end(JSON.stringify({\n        success: false,\n        message: e.message\n      }));\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/api/mail.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./src/pages/api/mail.ts"));
module.exports = __webpack_exports__;

})();