{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/romanlavrik/Documents/work/online-school/frontend/src/components/Webinar/ContactFormBtn/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Button } from 'semantic-ui-react';\nimport { postData } from '../../../client';\nimport { ModalForm } from './ModalForm';\nimport { ModalFormSuccess } from './ModalFormSuccess';\nvar StyledButton = styled(Button).withConfig({\n  displayName: \"ContactFormBtn__StyledButton\",\n  componentId: \"sc-3lo7gh-0\"\n})([\"margin:0 !important;color:#fff !important;background:#1c439c !important;font-size:16px !important;font-weight:500 !important;&:hover{background:#3963e6 !important;}\"]);\n_c = StyledButton;\nvar INITIAL_RESPONSE = {\n  success: undefined,\n  message: ''\n};\nexport var ContactBtn = function ContactBtn() {\n  _s();\n\n  var _useState = useState(false),\n      isModalOpen = _useState[0],\n      setModalOpen = _useState[1];\n\n  var _useState2 = useState({\n    name: '',\n    number: ''\n  }),\n      formValue = _useState2[0],\n      setFormValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      isSending = _useState3[0],\n      setIsSendng = _useState3[1];\n\n  var _useState4 = useState(INITIAL_RESPONSE),\n      response = _useState4[0],\n      setResponse = _useState4[1];\n\n  var _useState5 = useState(false),\n      isSuccessModal = _useState5[0],\n      setIsSuccessModal = _useState5[1];\n\n  var handleChange = function handleChange(e) {\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value;\n    setFormValue(_objectSpread(_objectSpread({}, formValue), {}, _defineProperty({}, name, value)));\n  };\n\n  var onRequestBtnClick = function onRequestBtnClick() {\n    setModalOpen(!isModalOpen);\n  };\n\n  var onSend = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsSendng(true);\n              _context.next = 3;\n              return postData('/api/mail', {\n                name: formValue.name,\n                number: formValue.number\n              });\n\n            case 3:\n              res = _context.sent;\n              setIsSendng(false);\n\n              if (res.success) {\n                setModalOpen(false);\n                setIsSuccessModal(true);\n              } else {\n                setResponse(res);\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSend() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSuccessModalClose = function handleSuccessModalClose() {\n    setIsSuccessModal(false);\n    setResponse(INITIAL_RESPONSE);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(StyledButton, {\n    primary: true,\n    onClick: onRequestBtnClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"\\u041E\\u0441\\u0442\\u0430\\u0432\\u0438\\u0442\\u044C \\u0437\\u0430\\u044F\\u0432\\u043A\\u0443\"), __jsx(ModalFormSuccess, {\n    handleClose: handleSuccessModalClose,\n    open: isSuccessModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }), __jsx(ModalForm, {\n    handleChange: handleChange,\n    onSend: onSend,\n    onClose: function onClose() {\n      return setModalOpen(false);\n    },\n    open: isModalOpen,\n    name: formValue.name,\n    number: formValue.number,\n    setOpen: setModalOpen,\n    isSending: isSending,\n    response: response,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }));\n};\n\n_s(ContactBtn, \"hkFf4ZkDGfWkL7JPjMj2JJ7jS6Y=\");\n\n_c2 = ContactBtn;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledButton\");\n$RefreshReg$(_c2, \"ContactBtn\");","map":{"version":3,"sources":["/Users/romanlavrik/Documents/work/online-school/frontend/src/components/Webinar/ContactFormBtn/index.tsx"],"names":["React","useState","styled","Button","postData","ModalForm","ModalFormSuccess","StyledButton","INITIAL_RESPONSE","success","undefined","message","ContactBtn","isModalOpen","setModalOpen","name","number","formValue","setFormValue","isSending","setIsSendng","response","setResponse","isSuccessModal","setIsSuccessModal","handleChange","e","target","value","onRequestBtnClick","onSend","res","handleSuccessModalClose"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Button } from 'semantic-ui-react';\n\nimport { postData } from '../../../client';\nimport { ModalForm } from './ModalForm';\nimport { ModalFormSuccess } from './ModalFormSuccess';\n\n\nconst StyledButton = styled(Button)`\n    margin: 0 !important;\n    color: #fff !important;\n    background: #1c439c !important;\n    font-size: 16px !important;\n    font-weight: 500 !important;\n\n    &:hover {\n        background: #3963e6 !important;\n    }\n`;\n\nconst INITIAL_RESPONSE = {\n    success: undefined,\n    message: ''\n};\n\nexport const ContactBtn = () => {\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [formValue, setFormValue] = useState({\n        name: '',\n        number: ''\n    });\n    const [isSending, setIsSendng] = useState(false);\n    const [response, setResponse] = useState(INITIAL_RESPONSE);\n    const [isSuccessModal, setIsSuccessModal] = useState(false);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormValue({ ...formValue, [name]: value });\n    }\n\n    const onRequestBtnClick = () => {\n        setModalOpen(!isModalOpen);\n    };\n\n    const onSend = async () => {\n        setIsSendng(true);\n\n        const res = await postData('/api/mail', {\n            name: formValue.name,\n            number: formValue.number,\n        });\n\n        setIsSendng(false);\n\n        if (res.success) {\n            setModalOpen(false);\n            setIsSuccessModal(true);\n        } else {\n            setResponse(res);\n        }\n    };\n\n    const handleSuccessModalClose = () => {\n        setIsSuccessModal(false);\n        setResponse(INITIAL_RESPONSE);\n    };\n\n    return (\n        <>\n            <StyledButton primary onClick={onRequestBtnClick}>\n                Оставить заявку\n            </StyledButton>\n            <ModalFormSuccess\n                handleClose={handleSuccessModalClose}\n                open={isSuccessModal}\n            />\n            <ModalForm\n                handleChange={handleChange}\n                onSend={onSend}\n                onClose={() => setModalOpen(false)}\n                open={isModalOpen}\n                name={formValue.name}\n                number={formValue.number}\n                setOpen={setModalOpen}\n                isSending={isSending}\n                response={response}\n            />\n        </>\n    );\n};"]},"metadata":{},"sourceType":"module"}