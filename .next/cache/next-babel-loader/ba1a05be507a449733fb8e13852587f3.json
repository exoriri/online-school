{"ast":null,"code":"var _jsxFileName = \"/Users/romanlavrik/Documents/work/online-school/frontend/src/components/Webinar/ContactFormBtn/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Button } from 'semantic-ui-react';\nimport { postData } from '../../../client';\nimport { ModalForm } from './ModalForm';\nimport { ModalFormSuccess } from './ModalFormSuccess';\nconst StyledButton = styled(Button).withConfig({\n  displayName: \"ContactFormBtn__StyledButton\",\n  componentId: \"sc-3lo7gh-0\"\n})([\"margin:0 !important;color:#fff !important;background:#1c439c !important;font-size:16px !important;font-weight:500 !important;&:hover{background:#3963e6 !important;}\"]);\nconst INITIAL_RESPONSE = {\n  success: undefined,\n  message: ''\n};\nexport const ContactBtn = () => {\n  const {\n    0: isModalOpen,\n    1: setModalOpen\n  } = useState(false);\n  const {\n    0: formValue,\n    1: setFormValue\n  } = useState({\n    name: '',\n    number: ''\n  });\n  const {\n    0: isSending,\n    1: setIsSendng\n  } = useState(false);\n  const {\n    0: response,\n    1: setResponse\n  } = useState(INITIAL_RESPONSE);\n  const {\n    0: isSuccessModal,\n    1: setIsSuccessModal\n  } = useState(false);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormValue(_objectSpread(_objectSpread({}, formValue), {}, {\n      [name]: value\n    }));\n  };\n\n  const onRequestBtnClick = () => {\n    setModalOpen(!isModalOpen);\n  };\n\n  const onSend = async () => {\n    setIsSendng(true);\n    const res = await postData('/api/mail', {\n      name: formValue.name,\n      number: formValue.number\n    });\n    setIsSendng(false);\n\n    if (res.success) {\n      setModalOpen(false);\n      setIsSuccessModal(true);\n    } else {\n      setResponse(res);\n    }\n  };\n\n  const handleSuccessModalClose = () => {\n    setIsSuccessModal(false);\n    setResponse(INITIAL_RESPONSE);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(StyledButton, {\n    primary: true,\n    onClick: onRequestBtnClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"\\u0417\\u0430\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u043A\\u043E\\u043D\\u0441\\u0443\\u043B\\u044C\\u0442\\u0430\\u0446\\u0438\\u044E\"), __jsx(ModalFormSuccess, {\n    handleClose: handleSuccessModalClose,\n    open: isSuccessModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }), __jsx(ModalForm, {\n    handleChange: handleChange,\n    onSend: onSend,\n    onClose: () => setModalOpen(false),\n    open: isModalOpen,\n    name: formValue.name,\n    number: formValue.number,\n    setOpen: setModalOpen,\n    isSending: isSending,\n    response: response,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/romanlavrik/Documents/work/online-school/frontend/src/components/Webinar/ContactFormBtn/index.tsx"],"names":["React","useState","styled","Button","postData","ModalForm","ModalFormSuccess","StyledButton","INITIAL_RESPONSE","success","undefined","message","ContactBtn","isModalOpen","setModalOpen","formValue","setFormValue","name","number","isSending","setIsSendng","response","setResponse","isSuccessModal","setIsSuccessModal","handleChange","e","value","target","onRequestBtnClick","onSend","res","handleSuccessModalClose"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Button } from 'semantic-ui-react';\n\nimport { postData } from '../../../client';\nimport { ModalForm } from './ModalForm';\nimport { ModalFormSuccess } from './ModalFormSuccess';\n\n\nconst StyledButton = styled(Button)`\n    margin: 0 !important;\n    color: #fff !important;\n    background: #1c439c !important;\n    font-size: 16px !important;\n    font-weight: 500 !important;\n\n    &:hover {\n        background: #3963e6 !important;\n    }\n`;\n\nconst INITIAL_RESPONSE = {\n    success: undefined,\n    message: ''\n};\n\nexport const ContactBtn = () => {\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [formValue, setFormValue] = useState({\n        name: '',\n        number: ''\n    });\n    const [isSending, setIsSendng] = useState(false);\n    const [response, setResponse] = useState(INITIAL_RESPONSE);\n    const [isSuccessModal, setIsSuccessModal] = useState(false);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormValue({ ...formValue, [name]: value });\n    }\n\n    const onRequestBtnClick = () => {\n        setModalOpen(!isModalOpen);\n    };\n\n    const onSend = async () => {\n        setIsSendng(true);\n\n        const res = await postData('/api/mail', {\n            name: formValue.name,\n            number: formValue.number,\n        });\n\n        setIsSendng(false);\n\n        if (res.success) {\n            setModalOpen(false);\n            setIsSuccessModal(true);\n        } else {\n            setResponse(res);\n        }\n    };\n\n    const handleSuccessModalClose = () => {\n        setIsSuccessModal(false);\n        setResponse(INITIAL_RESPONSE);\n    };\n\n    return (\n        <>\n            <StyledButton primary onClick={onRequestBtnClick}>\n                Заказать консультацию\n            </StyledButton>\n            <ModalFormSuccess\n                handleClose={handleSuccessModalClose}\n                open={isSuccessModal}\n            />\n            <ModalForm\n                handleChange={handleChange}\n                onSend={onSend}\n                onClose={() => setModalOpen(false)}\n                open={isModalOpen}\n                name={formValue.name}\n                number={formValue.number}\n                setOpen={setModalOpen}\n                isSending={isSending}\n                response={response}\n            />\n        </>\n    );\n};"]},"metadata":{},"sourceType":"module"}